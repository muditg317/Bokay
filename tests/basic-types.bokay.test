--STDOUT:

--STDOUT-END--#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&--STDERR:
[ args-parser.cpp: 102] INFO    - Input source file: tests/basic-types.bokay
[ args-parser.cpp: 105] INFO    - Output path: tests/build/basic-types
[ args-parser.cpp: 113] INFO    - Temp file output to: tests/build
[    compiler.cpp:  95] INFO    - Writing tokens to temp file: "tests/build/basic-types.tok"
[    compiler.cpp: 114] INFO    - Writing parse tree to temp file: "tests/build/basic-types.ptree"

--STDERR-END
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
        COMMENT at [Line:    1, Column:   1]: `// this test checks that simple integer and floating point types can be compiled\n`
     WHITESPACE at [Line:    2, Column:   1]: `\n`
      BASE_TYPE at [Line:    3, Column:   1]: `u8`
     WHITESPACE at [Line:    3, Column:   3]: ` `
           WORD at [Line:    3, Column:   4]: `a_byte`
     WHITESPACE at [Line:    3, Column:  10]: ` `
         EQUALS at [Line:    3, Column:  11]: `=`
     WHITESPACE at [Line:    3, Column:  12]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  13]: `5`
      SEMICOLON at [Line:    3, Column:  14]: `;`
     WHITESPACE at [Line:    3, Column:  15]: `\n`
      BASE_TYPE at [Line:    4, Column:   1]: `s64`
     WHITESPACE at [Line:    4, Column:   4]: ` `
           WORD at [Line:    4, Column:   5]: `signed`
     WHITESPACE at [Line:    4, Column:  11]: ` `
         EQUALS at [Line:    4, Column:  12]: `=`
     WHITESPACE at [Line:    4, Column:  13]: ` `
          MINUS at [Line:    4, Column:  14]: `-`
DECIMAL_LITERAL at [Line:    4, Column:  15]: `100`
      SEMICOLON at [Line:    4, Column:  18]: `;`
     WHITESPACE at [Line:    4, Column:  19]: `\n`
      BASE_TYPE at [Line:    5, Column:   1]: `u16`
     WHITESPACE at [Line:    5, Column:   4]: ` `
           WORD at [Line:    5, Column:   5]: `biggerInt`
     WHITESPACE at [Line:    5, Column:  14]: ` `
         EQUALS at [Line:    5, Column:  15]: `=`
     WHITESPACE at [Line:    5, Column:  16]: ` `
          MINUS at [Line:    5, Column:  17]: `-`
DECIMAL_LITERAL at [Line:    5, Column:  18]: `2315`
      SEMICOLON at [Line:    5, Column:  22]: `;`
     WHITESPACE at [Line:    5, Column:  23]: `\n`
      BASE_TYPE at [Line:    6, Column:   1]: `f32`
     WHITESPACE at [Line:    6, Column:   4]: ` `
           WORD at [Line:    6, Column:   5]: `a_float2`
     WHITESPACE at [Line:    6, Column:  13]: ` `
         EQUALS at [Line:    6, Column:  14]: `=`
     WHITESPACE at [Line:    6, Column:  15]: ` `
  FLOAT_LITERAL at [Line:    6, Column:  16]: `234.2412`
      SEMICOLON at [Line:    6, Column:  24]: `;`
     WHITESPACE at [Line:    6, Column:  25]: `\n`
     WHITESPACE at [Line:    7, Column:   1]: `\n`

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
SOURCE
	SOURCE_BODY
		STATEMENTS
			STATEMENTS
				STATEMENTS
					STATEMENTS
						STATEMENT
							STATEMENT_BODY
								DECLARATION
									DECL_SPECIFIER - BASE_TYPE(`u8`)
									DECL_LIST
										DECL_ITEM
											DECLARATOR
												ID - WORD(`a_byte`)
											EQUALS(`=`)
											INITIALIZER
												EXPRESSION
													ASSIGNMENT_EXPR
														LOGICAL_EXPR
															RELATIONAL_EQ_EXPR
																RELATIONAL_COMP_EXPR
																	ADDITIVE_EXPR
																		MULTIPLICATIVE_EXPR
																			UNARY_EXPR
																				VARUSE_EXPR
																					VAR_EXPR
																						LITERAL - DECIMAL_LITERAL(`5`)
							SEMICOLON(`;`)
					STATEMENT
						STATEMENT_BODY
							DECLARATION
								DECL_SPECIFIER - BASE_TYPE(`s64`)
								DECL_LIST
									DECL_ITEM
										DECLARATOR
											ID - WORD(`signed`)
										EQUALS(`=`)
										INITIALIZER
											EXPRESSION
												ASSIGNMENT_EXPR
													LOGICAL_EXPR
														RELATIONAL_EQ_EXPR
															RELATIONAL_COMP_EXPR
																ADDITIVE_EXPR
																	MULTIPLICATIVE_EXPR
																		UNARY_EXPR
																			UNARY_OP - MINUS(`-`)
																			UNARY_EXPR
																				VARUSE_EXPR
																					VAR_EXPR
																						LITERAL - DECIMAL_LITERAL(`100`)
						SEMICOLON(`;`)
				STATEMENT
					STATEMENT_BODY
						DECLARATION
							DECL_SPECIFIER - BASE_TYPE(`u16`)
							DECL_LIST
								DECL_ITEM
									DECLARATOR
										ID - WORD(`biggerInt`)
									EQUALS(`=`)
									INITIALIZER
										EXPRESSION
											ASSIGNMENT_EXPR
												LOGICAL_EXPR
													RELATIONAL_EQ_EXPR
														RELATIONAL_COMP_EXPR
															ADDITIVE_EXPR
																MULTIPLICATIVE_EXPR
																	UNARY_EXPR
																		UNARY_OP - MINUS(`-`)
																		UNARY_EXPR
																			VARUSE_EXPR
																				VAR_EXPR
																					LITERAL - DECIMAL_LITERAL(`2315`)
					SEMICOLON(`;`)
			STATEMENT
				STATEMENT_BODY
					DECLARATION
						DECL_SPECIFIER - BASE_TYPE(`f32`)
						DECL_LIST
							DECL_ITEM
								DECLARATOR
									ID - WORD(`a_float2`)
								EQUALS(`=`)
								INITIALIZER
									EXPRESSION
										ASSIGNMENT_EXPR
											LOGICAL_EXPR
												RELATIONAL_EQ_EXPR
													RELATIONAL_COMP_EXPR
														ADDITIVE_EXPR
															MULTIPLICATIVE_EXPR
																UNARY_EXPR
																	VARUSE_EXPR
																		VAR_EXPR
																			LITERAL - FLOAT_LITERAL(`234.2412`)
				SEMICOLON(`;`)

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
AST(tests/build/basic-types.ast)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Blocks w/ control flow(tests/build/basic-types.blk)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
executable FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&