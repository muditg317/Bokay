--STDOUT:

--STDOUT-END--#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&--STDERR:
[ args-parser.cpp: 102] INFO    - Input source file: tests/basic-types.bokay
[ args-parser.cpp: 105] INFO    - Output path: tests/build/basic-types
[ args-parser.cpp: 113] INFO    - Temp file output to: tests/build
[    compiler.cpp:  95] INFO    - Writing tokens to temp file: "tests/build/basic-types.tok"
[    compiler.cpp: 114] INFO    - Writing parse tree to temp file: "tests/build/basic-types.ptree"

--STDERR-END
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
        COMMENT at [Line:    1, Column:   1]: `// this test checks that simple integer and floating point types can be compiled\n`
     WHITESPACE at [Line:    2, Column:   1]: `\n`
      BASE_TYPE at [Line:    3, Column:   1]: `u8`
     WHITESPACE at [Line:    3, Column:   3]: ` `
           WORD at [Line:    3, Column:   4]: `a_byte`
     WHITESPACE at [Line:    3, Column:  10]: ` `
         EQUALS at [Line:    3, Column:  11]: `=`
     WHITESPACE at [Line:    3, Column:  12]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  13]: `5`
      SEMICOLON at [Line:    3, Column:  14]: `;`
     WHITESPACE at [Line:    3, Column:  15]: `\n`
      BASE_TYPE at [Line:    4, Column:   1]: `s64`
     WHITESPACE at [Line:    4, Column:   4]: ` `
           WORD at [Line:    4, Column:   5]: `signed`
     WHITESPACE at [Line:    4, Column:  11]: ` `
         EQUALS at [Line:    4, Column:  12]: `=`
     WHITESPACE at [Line:    4, Column:  13]: ` `
          MINUS at [Line:    4, Column:  14]: `-`
DECIMAL_LITERAL at [Line:    4, Column:  15]: `100`
      SEMICOLON at [Line:    4, Column:  18]: `;`

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
ParseNode{SOURCE}
	ParseNode{SOURCE_BODY}
		ParseNode{STATEMENTS}
			ParseNode{STATEMENTS}
				ParseNode{STATEMENT}
					ParseNode{STATEMENT_BODY}
						ParseNode{ASSIGNMENT}
							ParseNode{LHS}
								ParseNode{DECLARATION}
									Token{BASE_TYPE(`u8`)}
									ParseNode{VARIABLE_USE}
										ParseNode{ID} - Token{WORD(`a_byte`)}
							Token{EQUALS(`=`)}
							ParseNode{EXPRESSION}
								ParseNode{TERM}
									ParseNode{LITERAL}
										ParseNode{RAW_LITERAL} - Token{DECIMAL_LITERAL(`5`)}
					Token{SEMICOLON(`;`)}
			ParseNode{STATEMENT}
				ParseNode{STATEMENT_BODY}
					ParseNode{ASSIGNMENT}
						ParseNode{LHS}
							ParseNode{DECLARATION}
								Token{BASE_TYPE(`s64`)}
								ParseNode{VARIABLE_USE}
									ParseNode{ID} - Token{WORD(`signed`)}
						Token{EQUALS(`=`)}
						ParseNode{EXPRESSION}
							ParseNode{TERM}
								ParseNode{LITERAL}
									Token{MINUS(`-`)}
									ParseNode{RAW_LITERAL} - Token{DECIMAL_LITERAL(`100`)}
				Token{SEMICOLON(`;`)}

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
AST(tests/build/basic-types.ast)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Blocks w/ control flow(tests/build/basic-types.blk)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
executable FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&