--STDOUT:

--STDOUT-END--#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&--STDERR:
[ args-parser.cpp: 102] INFO    - Input source file: tests/functions.bokay
[ args-parser.cpp: 105] INFO    - Output path: tests/build/functions
[ args-parser.cpp: 113] INFO    - Temp file output to: tests/build
[    compiler.cpp:  96] INFO    - Writing tokens to temp file: "tests/build/functions.tok"
[    compiler.cpp: 115] INFO    - Writing parse tree to temp file: "tests/build/functions.ptree"

--STDERR-END
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
        COMMENT at [Line:    1, Column:   1]: `// functions:\n`
        COMMENT at [Line:    2, Column:   1]: `//  {return type} {function name}({type} {name} [= {default to be evaluated at each call}]) {\n`
        COMMENT at [Line:    3, Column:   1]: `//    // contents\n`
        COMMENT at [Line:    4, Column:   1]: `//  }\n`
        COMMENT at [Line:    5, Column:   1]: `//  default params can be any where in the arg list (skip them via empty commas `func(5,,253)`)\n`
     WHITESPACE at [Line:    6, Column:   1]: `\n`
      BASE_TYPE at [Line:    7, Column:   1]: `u32`
     WHITESPACE at [Line:    7, Column:   4]: ` `
           WORD at [Line:    7, Column:   5]: `do_stuff`
     OPEN_PAREN at [Line:    7, Column:  13]: `(`
      BASE_TYPE at [Line:    7, Column:  14]: `u16`
     WHITESPACE at [Line:    7, Column:  17]: ` `
           WORD at [Line:    7, Column:  18]: `a`
          COMMA at [Line:    7, Column:  19]: `,`
     WHITESPACE at [Line:    7, Column:  20]: ` `
      BASE_TYPE at [Line:    7, Column:  21]: `u32`
     WHITESPACE at [Line:    7, Column:  24]: ` `
           WORD at [Line:    7, Column:  25]: `b`
    CLOSE_PAREN at [Line:    7, Column:  26]: `)`
     WHITESPACE at [Line:    7, Column:  27]: ` `
     OPEN_BRACE at [Line:    7, Column:  28]: `{`
     WHITESPACE at [Line:    7, Column:  29]: `\n`
     WHITESPACE at [Line:    8, Column:   1]: `  `
      KW_RETURN at [Line:    8, Column:   3]: `return`
     WHITESPACE at [Line:    8, Column:   9]: ` `
           WORD at [Line:    8, Column:  10]: `a`
           PLUS at [Line:    8, Column:  11]: `+`
           WORD at [Line:    8, Column:  12]: `b`
      SEMICOLON at [Line:    8, Column:  13]: `;`
     WHITESPACE at [Line:    8, Column:  14]: `\n`
    CLOSE_BRACE at [Line:    9, Column:   1]: `}`
     WHITESPACE at [Line:    9, Column:   2]: `\n`
      BASE_TYPE at [Line:   10, Column:   1]: `u32`
     WHITESPACE at [Line:   10, Column:   4]: ` `
           WORD at [Line:   10, Column:   5]: `res`
     WHITESPACE at [Line:   10, Column:   8]: ` `
         EQUALS at [Line:   10, Column:   9]: `=`
     WHITESPACE at [Line:   10, Column:  10]: ` `
           WORD at [Line:   10, Column:  11]: `do_stuff`
     OPEN_PAREN at [Line:   10, Column:  19]: `(`
DECIMAL_LITERAL at [Line:   10, Column:  20]: `2`
          COMMA at [Line:   10, Column:  21]: `,`
DECIMAL_LITERAL at [Line:   10, Column:  22]: `3`
    CLOSE_PAREN at [Line:   10, Column:  23]: `)`
      SEMICOLON at [Line:   10, Column:  24]: `;`
        COMMENT at [Line:   10, Column:  25]: ` // returns 5\n`
     WHITESPACE at [Line:   11, Column:   1]: `\n`
      BASE_TYPE at [Line:   12, Column:   1]: `s64`
     WHITESPACE at [Line:   12, Column:   4]: ` `
           WORD at [Line:   12, Column:   5]: `weird_defaults`
     OPEN_PAREN at [Line:   12, Column:  19]: `(`
      BASE_TYPE at [Line:   12, Column:  20]: `u16`
     WHITESPACE at [Line:   12, Column:  23]: ` `
           WORD at [Line:   12, Column:  24]: `a`
     WHITESPACE at [Line:   12, Column:  25]: ` `
         EQUALS at [Line:   12, Column:  26]: `=`
     WHITESPACE at [Line:   12, Column:  27]: ` `
DECIMAL_LITERAL at [Line:   12, Column:  28]: `5`
          COMMA at [Line:   12, Column:  29]: `,`
     WHITESPACE at [Line:   12, Column:  30]: ` `
      BASE_TYPE at [Line:   12, Column:  31]: `u32`
     WHITESPACE at [Line:   12, Column:  34]: ` `
           WORD at [Line:   12, Column:  35]: `b`
          COMMA at [Line:   12, Column:  36]: `,`
     WHITESPACE at [Line:   12, Column:  37]: ` `
      BASE_TYPE at [Line:   12, Column:  38]: `s16`
     WHITESPACE at [Line:   12, Column:  41]: ` `
           WORD at [Line:   12, Column:  42]: `c`
          COMMA at [Line:   12, Column:  43]: `,`
     WHITESPACE at [Line:   12, Column:  44]: ` `
      BASE_TYPE at [Line:   12, Column:  45]: `s32`
     WHITESPACE at [Line:   12, Column:  48]: ` `
           WORD at [Line:   12, Column:  49]: `d`
     WHITESPACE at [Line:   12, Column:  50]: ` `
         EQUALS at [Line:   12, Column:  51]: `=`
     WHITESPACE at [Line:   12, Column:  52]: ` `
          MINUS at [Line:   12, Column:  53]: `-`
DECIMAL_LITERAL at [Line:   12, Column:  54]: `100`
          COMMA at [Line:   12, Column:  57]: `,`
     WHITESPACE at [Line:   12, Column:  58]: ` `
      BASE_TYPE at [Line:   12, Column:  59]: `s64`
     WHITESPACE at [Line:   12, Column:  62]: ` `
           WORD at [Line:   12, Column:  63]: `e`
     WHITESPACE at [Line:   12, Column:  64]: ` `
         EQUALS at [Line:   12, Column:  65]: `=`
     WHITESPACE at [Line:   12, Column:  66]: ` `
          MINUS at [Line:   12, Column:  67]: `-`
DECIMAL_LITERAL at [Line:   12, Column:  68]: `8398`
          COMMA at [Line:   12, Column:  72]: `,`
     WHITESPACE at [Line:   12, Column:  73]: ` `
      BASE_TYPE at [Line:   12, Column:  74]: `u8`
     WHITESPACE at [Line:   12, Column:  76]: ` `
           WORD at [Line:   12, Column:  77]: `f`
    CLOSE_PAREN at [Line:   12, Column:  78]: `)`
     WHITESPACE at [Line:   12, Column:  79]: ` `
     OPEN_BRACE at [Line:   12, Column:  80]: `{`
     WHITESPACE at [Line:   12, Column:  81]: `\n`
     WHITESPACE at [Line:   13, Column:   1]: `  `
      KW_RETURN at [Line:   13, Column:   3]: `return`
     WHITESPACE at [Line:   13, Column:   9]: ` `
           WORD at [Line:   13, Column:  10]: `a`
           PLUS at [Line:   13, Column:  11]: `+`
           WORD at [Line:   13, Column:  12]: `b`
           PLUS at [Line:   13, Column:  13]: `+`
           WORD at [Line:   13, Column:  14]: `c`
           PLUS at [Line:   13, Column:  15]: `+`
           WORD at [Line:   13, Column:  16]: `d`
           PLUS at [Line:   13, Column:  17]: `+`
           WORD at [Line:   13, Column:  18]: `e`
           PLUS at [Line:   13, Column:  19]: `+`
           WORD at [Line:   13, Column:  20]: `f`
      SEMICOLON at [Line:   13, Column:  21]: `;`
     WHITESPACE at [Line:   13, Column:  22]: `\n`
    CLOSE_BRACE at [Line:   14, Column:   1]: `}`
     WHITESPACE at [Line:   14, Column:   2]: `\n`
      BASE_TYPE at [Line:   15, Column:   1]: `s64`
     WHITESPACE at [Line:   15, Column:   4]: ` `
           WORD at [Line:   15, Column:   5]: `weird`
     WHITESPACE at [Line:   15, Column:  10]: ` `
         EQUALS at [Line:   15, Column:  11]: `=`
     WHITESPACE at [Line:   15, Column:  12]: ` `
           WORD at [Line:   15, Column:  13]: `weird_defaults`
     OPEN_PAREN at [Line:   15, Column:  27]: `(`
          COMMA at [Line:   15, Column:  28]: `,`
           WORD at [Line:   15, Column:  29]: `res`
          COMMA at [Line:   15, Column:  32]: `,`
          MINUS at [Line:   15, Column:  33]: `-`
DECIMAL_LITERAL at [Line:   15, Column:  34]: `10`
          COMMA at [Line:   15, Column:  36]: `,`
          COMMA at [Line:   15, Column:  37]: `,`
          MINUS at [Line:   15, Column:  38]: `-`
DECIMAL_LITERAL at [Line:   15, Column:  39]: `234`
          COMMA at [Line:   15, Column:  42]: `,`
DECIMAL_LITERAL at [Line:   15, Column:  43]: `20`
    CLOSE_PAREN at [Line:   15, Column:  45]: `)`
      SEMICOLON at [Line:   15, Column:  46]: `;`
        COMMENT at [Line:   15, Column:  47]: ` // runs with abcdef==5,5,-10,-100,-234,20 -- returns -314\n`

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
SOURCE > SOURCE_BODY > STATEMENTS
	STATEMENTS
		STATEMENTS
			STATEMENTS > STATEMENT > FUNCTION_IMPL
				FUNC_TYPE_DECL
					DECL_SPECIFIER - BASE_TYPE(`u32`)
					NO_PTR_DECL - WORD(`do_stuff`)
				OPEN_PAREN(`(`)
				FUNCTION_ARGUMENTS
					FUNCTION_ARGUMENTS > FUNCTION_ARGUMENT > FUNC_TYPE_DECL
						DECL_SPECIFIER - BASE_TYPE(`u16`)
						NO_PTR_DECL - WORD(`a`)
					COMMA(`,`)
					FUNCTION_ARGUMENT > FUNC_TYPE_DECL
						DECL_SPECIFIER - BASE_TYPE(`u32`)
						NO_PTR_DECL - WORD(`b`)
				CLOSE_PAREN(`)`)
				CODE_BLOCK
					OPEN_BRACE(`{`)
					STATEMENTS > STATEMENT > RETURN_STMT
						KW_RETURN(`return`)
						EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR
							ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								ID - WORD(`a`)
							ADDITIVE_OP - PLUS(`+`)
							MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								ID - WORD(`b`)
						SEMICOLON(`;`)
					CLOSE_BRACE(`}`)
			STATEMENT
				STATEMENT_BODY > DECLARATION
					DECL_SPECIFIER - BASE_TYPE(`u32`)
					DECL_LIST > DECL_ITEM
						DECLARATOR - WORD(`res`)
						EQUALS(`=`)
						INITIALIZER > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > FUNCTION_CALL_EXPR
							VARUSE_EXPR > VAR_EXPR
								ID - WORD(`do_stuff`)
							OPEN_PAREN(`(`)
							ARG_LIST
								ARG_LIST > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
									LITERAL - DECIMAL_LITERAL(`2`)
								COMMA(`,`)
								ARG_LIST > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
									LITERAL - DECIMAL_LITERAL(`3`)
							CLOSE_PAREN(`)`)
				SEMICOLON(`;`)
		STATEMENT > FUNCTION_IMPL
			FUNC_TYPE_DECL
				DECL_SPECIFIER - BASE_TYPE(`s64`)
				NO_PTR_DECL - WORD(`weird_defaults`)
			OPEN_PAREN(`(`)
			FUNCTION_ARGUMENTS
				FUNCTION_ARGUMENTS
					FUNCTION_ARGUMENTS
						FUNCTION_ARGUMENTS
							FUNCTION_ARGUMENTS
								FUNCTION_ARGUMENTS > FUNCTION_ARGUMENT
									FUNC_TYPE_DECL
										DECL_SPECIFIER - BASE_TYPE(`u16`)
										NO_PTR_DECL - WORD(`a`)
									EQUALS(`=`)
									DEFAULT_FUNC_ARG_VALUE > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
										LITERAL - DECIMAL_LITERAL(`5`)
								COMMA(`,`)
								FUNCTION_ARGUMENT > FUNC_TYPE_DECL
									DECL_SPECIFIER - BASE_TYPE(`u32`)
									NO_PTR_DECL - WORD(`b`)
							COMMA(`,`)
							FUNCTION_ARGUMENT > FUNC_TYPE_DECL
								DECL_SPECIFIER - BASE_TYPE(`s16`)
								NO_PTR_DECL - WORD(`c`)
						COMMA(`,`)
						FUNCTION_ARGUMENT
							FUNC_TYPE_DECL
								DECL_SPECIFIER - BASE_TYPE(`s32`)
								NO_PTR_DECL - WORD(`d`)
							EQUALS(`=`)
							DEFAULT_FUNC_ARG_VALUE > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR
								UNARY_OP - MINUS(`-`)
								UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
									LITERAL - DECIMAL_LITERAL(`100`)
					COMMA(`,`)
					FUNCTION_ARGUMENT
						FUNC_TYPE_DECL
							DECL_SPECIFIER - BASE_TYPE(`s64`)
							NO_PTR_DECL - WORD(`e`)
						EQUALS(`=`)
						DEFAULT_FUNC_ARG_VALUE > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR
							UNARY_OP - MINUS(`-`)
							UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - DECIMAL_LITERAL(`8398`)
				COMMA(`,`)
				FUNCTION_ARGUMENT > FUNC_TYPE_DECL
					DECL_SPECIFIER - BASE_TYPE(`u8`)
					NO_PTR_DECL - WORD(`f`)
			CLOSE_PAREN(`)`)
			CODE_BLOCK
				OPEN_BRACE(`{`)
				STATEMENTS > STATEMENT > RETURN_STMT
					KW_RETURN(`return`)
					EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR
						ADDITIVE_EXPR
							ADDITIVE_EXPR
								ADDITIVE_EXPR
									ADDITIVE_EXPR
										ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
											ID - WORD(`a`)
										ADDITIVE_OP - PLUS(`+`)
										MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
											ID - WORD(`b`)
									ADDITIVE_OP - PLUS(`+`)
									MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
										ID - WORD(`c`)
								ADDITIVE_OP - PLUS(`+`)
								MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
									ID - WORD(`d`)
							ADDITIVE_OP - PLUS(`+`)
							MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								ID - WORD(`e`)
						ADDITIVE_OP - PLUS(`+`)
						MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							ID - WORD(`f`)
					SEMICOLON(`;`)
				CLOSE_BRACE(`}`)
	STATEMENT
		STATEMENT_BODY > DECLARATION
			DECL_SPECIFIER - BASE_TYPE(`s64`)
			DECL_LIST > DECL_ITEM
				DECLARATOR - WORD(`weird`)
				EQUALS(`=`)
				INITIALIZER > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > FUNCTION_CALL_EXPR
					VARUSE_EXPR > VAR_EXPR
						ID - WORD(`weird_defaults`)
					OPEN_PAREN(`(`)
					ARG_LIST
						ARG_LIST
							ARG_LIST
								ARG_LIST
									COMMA(`,`)
									ARG_LIST > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
										ID - WORD(`res`)
								COMMA(`,`)
								ARG_LIST > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR
									UNARY_OP - MINUS(`-`)
									UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
										LITERAL - DECIMAL_LITERAL(`10`)
							COMMA(`,`)
							ARG_LIST
								COMMA(`,`)
								ARG_LIST > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR
									UNARY_OP - MINUS(`-`)
									UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
										LITERAL - DECIMAL_LITERAL(`234`)
						COMMA(`,`)
						ARG_LIST > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							LITERAL - DECIMAL_LITERAL(`20`)
					CLOSE_PAREN(`)`)
		SEMICOLON(`;`)

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
AST(tests/build/functions.ast)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Blocks w/ control flow(tests/build/functions.blk)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
executable FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&