--STDOUT:

--STDOUT-END--#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&--STDERR:
[ args-parser.cpp: 102] INFO    - Input source file: tests/complex-expressions.bokay
[ args-parser.cpp: 105] INFO    - Output path: tests/build/complex-expressions
[ args-parser.cpp: 113] INFO    - Temp file output to: tests/build
[    compiler.cpp:  95] INFO    - Writing tokens to temp file: "tests/build/complex-expressions.tok"
[    compiler.cpp: 114] INFO    - Writing parse tree to temp file: "tests/build/complex-expressions.ptree"

--STDERR-END
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
        COMMENT at [Line:    1, Column:   1]: `// this test checks that simple integer and floating point types can be compiled\n`
     WHITESPACE at [Line:    2, Column:   1]: `\n`
      BASE_TYPE at [Line:    3, Column:   1]: `u32`
     WHITESPACE at [Line:    3, Column:   4]: ` `
           WORD at [Line:    3, Column:   5]: `bitIntWith5components`
     WHITESPACE at [Line:    3, Column:  26]: ` `
         EQUALS at [Line:    3, Column:  27]: `=`
     WHITESPACE at [Line:    3, Column:  28]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  29]: `5`
     WHITESPACE at [Line:    3, Column:  30]: ` `
           PLUS at [Line:    3, Column:  31]: `+`
     WHITESPACE at [Line:    3, Column:  32]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  33]: `100`
     WHITESPACE at [Line:    3, Column:  36]: ` `
          MINUS at [Line:    3, Column:  37]: `-`
     WHITESPACE at [Line:    3, Column:  38]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  39]: `52`
     WHITESPACE at [Line:    3, Column:  41]: ` `
           STAR at [Line:    3, Column:  42]: `*`
     WHITESPACE at [Line:    3, Column:  43]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  44]: `38`
     WHITESPACE at [Line:    3, Column:  46]: ` `
           PLUS at [Line:    3, Column:  47]: `+`
     WHITESPACE at [Line:    3, Column:  48]: ` `
DECIMAL_LITERAL at [Line:    3, Column:  49]: `16`
      SEMICOLON at [Line:    3, Column:  51]: `;`
     WHITESPACE at [Line:    3, Column:  52]: `\n`
      BASE_TYPE at [Line:    4, Column:   1]: `s64`
     WHITESPACE at [Line:    4, Column:   4]: ` `
           WORD at [Line:    4, Column:   5]: `floating_expressions`
     WHITESPACE at [Line:    4, Column:  25]: ` `
         EQUALS at [Line:    4, Column:  26]: `=`
     WHITESPACE at [Line:    4, Column:  27]: ` `
          MINUS at [Line:    4, Column:  28]: `-`
DECIMAL_LITERAL at [Line:    4, Column:  29]: `100`
     WHITESPACE at [Line:    4, Column:  32]: ` `
            DIV at [Line:    4, Column:  33]: `/`
     WHITESPACE at [Line:    4, Column:  34]: ` `
  FLOAT_LITERAL at [Line:    4, Column:  35]: `26.789`
     WHITESPACE at [Line:    4, Column:  41]: ` `
           PLUS at [Line:    4, Column:  42]: `+`
     WHITESPACE at [Line:    4, Column:  43]: ` `
  FLOAT_LITERAL at [Line:    4, Column:  44]: `34.15`
     WHITESPACE at [Line:    4, Column:  49]: ` `
           STAR at [Line:    4, Column:  50]: `*`
     WHITESPACE at [Line:    4, Column:  51]: ` `
          MINUS at [Line:    4, Column:  52]: `-`
  FLOAT_LITERAL at [Line:    4, Column:  53]: `253.14`
      SEMICOLON at [Line:    4, Column:  59]: `;`

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
SOURCE > SOURCE_BODY > STATEMENTS
	STATEMENTS > STATEMENT
		STATEMENT_BODY > DECLARATION
			DECL_SPECIFIER - BASE_TYPE(`u32`)
			DECL_LIST > DECL_ITEM
				DECLARATOR - WORD(`bitIntWith5components`)
				EQUALS(`=`)
				INITIALIZER > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR
					ADDITIVE_EXPR
						ADDITIVE_EXPR
							ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - DECIMAL_LITERAL(`5`)
							ADDITIVE_OP - PLUS(`+`)
							MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - DECIMAL_LITERAL(`100`)
						ADDITIVE_OP - MINUS(`-`)
						MULTIPLICATIVE_EXPR
							MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - DECIMAL_LITERAL(`52`)
							MULTIPLICATIVE_OP - STAR(`*`)
							UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - DECIMAL_LITERAL(`38`)
					ADDITIVE_OP - PLUS(`+`)
					MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
						LITERAL - DECIMAL_LITERAL(`16`)
		SEMICOLON(`;`)
	STATEMENT
		STATEMENT_BODY > DECLARATION
			DECL_SPECIFIER - BASE_TYPE(`s64`)
			DECL_LIST > DECL_ITEM
				DECLARATOR - WORD(`floating_expressions`)
				EQUALS(`=`)
				INITIALIZER > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR
					ADDITIVE_EXPR > MULTIPLICATIVE_EXPR
						MULTIPLICATIVE_EXPR > UNARY_EXPR
							UNARY_OP - MINUS(`-`)
							UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - DECIMAL_LITERAL(`100`)
						MULTIPLICATIVE_OP - DIV(`/`)
						UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							LITERAL - FLOAT_LITERAL(`26.789`)
					ADDITIVE_OP - PLUS(`+`)
					MULTIPLICATIVE_EXPR
						MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							LITERAL - FLOAT_LITERAL(`34.15`)
						MULTIPLICATIVE_OP - STAR(`*`)
						UNARY_EXPR
							UNARY_OP - MINUS(`-`)
							UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
								LITERAL - FLOAT_LITERAL(`253.14`)
		SEMICOLON(`;`)

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
AST(tests/build/complex-expressions.ast)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Blocks w/ control flow(tests/build/complex-expressions.blk)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
executable FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&