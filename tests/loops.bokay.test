--STDOUT:

--STDOUT-END--#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&--STDERR:
[ args-parser.cpp: 102] INFO    - Input source file: tests/loops.bokay
[ args-parser.cpp: 105] INFO    - Output path: tests/build/loops
[ args-parser.cpp: 113] INFO    - Temp file output to: tests/build
[    compiler.cpp:  96] INFO    - Writing tokens to temp file: "tests/build/loops.tok"
[    compiler.cpp: 115] INFO    - Writing parse tree to temp file: "tests/build/loops.ptree"

--STDERR-END
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
        COMMENT at [Line:    1, Column:   1]: `// while loops:\n`
        COMMENT at [Line:    2, Column:   1]: `//  while ({condition}) {\n`
        COMMENT at [Line:    3, Column:   1]: `//    // code...\n`
        COMMENT at [Line:    4, Column:   1]: `//  }\n`
      BASE_TYPE at [Line:    5, Column:   1]: `s16`
     WHITESPACE at [Line:    5, Column:   4]: ` `
           WORD at [Line:    5, Column:   5]: `weird`
     WHITESPACE at [Line:    5, Column:  10]: ` `
         EQUALS at [Line:    5, Column:  11]: `=`
     WHITESPACE at [Line:    5, Column:  12]: ` `
          MINUS at [Line:    5, Column:  13]: `-`
DECIMAL_LITERAL at [Line:    5, Column:  14]: `400`
      SEMICOLON at [Line:    5, Column:  17]: `;`
     WHITESPACE at [Line:    5, Column:  18]: `\n`
       KW_WHILE at [Line:    6, Column:   1]: `while`
     WHITESPACE at [Line:    6, Column:   6]: ` `
     OPEN_PAREN at [Line:    6, Column:   7]: `(`
           WORD at [Line:    6, Column:   8]: `weird`
     WHITESPACE at [Line:    6, Column:  13]: ` `
            LSS at [Line:    6, Column:  14]: `<`
     WHITESPACE at [Line:    6, Column:  15]: ` `
          MINUS at [Line:    6, Column:  16]: `-`
DECIMAL_LITERAL at [Line:    6, Column:  17]: `300`
    CLOSE_PAREN at [Line:    6, Column:  20]: `)`
     WHITESPACE at [Line:    6, Column:  21]: ` `
     OPEN_BRACE at [Line:    6, Column:  22]: `{`
     WHITESPACE at [Line:    6, Column:  23]: `\n`
     WHITESPACE at [Line:    7, Column:   1]: `  `
           WORD at [Line:    7, Column:   3]: `weird`
     WHITESPACE at [Line:    7, Column:   8]: ` `
        PLUS_EQ at [Line:    7, Column:   9]: `+=`
     WHITESPACE at [Line:    7, Column:  11]: ` `
DECIMAL_LITERAL at [Line:    7, Column:  12]: `1`
      SEMICOLON at [Line:    7, Column:  13]: `;`
     WHITESPACE at [Line:    7, Column:  14]: `\n`
    CLOSE_BRACE at [Line:    8, Column:   1]: `}`
     WHITESPACE at [Line:    8, Column:   2]: `\n`
        COMMENT at [Line:    9, Column:   1]: `// TODO: implement inplace-incr/decr\n`
        COMMENT at [Line:   10, Column:   1]: `/*\nwhile (weird-- >= 0);\n*/`
     WHITESPACE at [Line:   11, Column:  25]: `\n`
     WHITESPACE at [Line:   12, Column:   1]: `\n`
        COMMENT at [Line:   13, Column:   1]: `// do-while loops:\n`
          KW_DO at [Line:   14, Column:   1]: `do`
     WHITESPACE at [Line:   14, Column:   3]: ` `
     OPEN_BRACE at [Line:   14, Column:   4]: `{`
     WHITESPACE at [Line:   14, Column:   5]: `\n`
     WHITESPACE at [Line:   15, Column:   1]: `  `
           WORD at [Line:   15, Column:   3]: `weird`
     WHITESPACE at [Line:   15, Column:   8]: ` `
        PLUS_EQ at [Line:   15, Column:   9]: `+=`
     WHITESPACE at [Line:   15, Column:  11]: ` `
DECIMAL_LITERAL at [Line:   15, Column:  12]: `1`
      SEMICOLON at [Line:   15, Column:  13]: `;`
     WHITESPACE at [Line:   15, Column:  14]: `\n`
    CLOSE_BRACE at [Line:   16, Column:   1]: `}`
     WHITESPACE at [Line:   16, Column:   2]: ` `
       KW_WHILE at [Line:   16, Column:   3]: `while`
     WHITESPACE at [Line:   16, Column:   8]: ` `
     OPEN_PAREN at [Line:   16, Column:   9]: `(`
           WORD at [Line:   16, Column:  10]: `weird`
     WHITESPACE at [Line:   16, Column:  15]: ` `
            LSS at [Line:   16, Column:  16]: `<`
     WHITESPACE at [Line:   16, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   16, Column:  18]: `50`
    CLOSE_PAREN at [Line:   16, Column:  20]: `)`
      SEMICOLON at [Line:   16, Column:  21]: `;`
     WHITESPACE at [Line:   16, Column:  22]: `\n`

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
SOURCE > SOURCE_BODY > STATEMENTS
	STATEMENTS
		STATEMENTS > STATEMENT
			STATEMENT_BODY > DECLARATION
				DECL_SPECIFIER - BASE_TYPE(`s16`)
				DECL_LIST > DECL_ITEM
					DECLARATOR - WORD(`weird`)
					EQUALS(`=`)
					INITIALIZER > EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR
						UNARY_OP - MINUS(`-`)
						UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							LITERAL - DECIMAL_LITERAL(`400`)
			SEMICOLON(`;`)
		STATEMENT > LOOP > WHILE_LOOP
			WHILE_EXPR
				KW_WHILE(`while`)
				OPEN_PAREN(`(`)
				EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR
					RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
						ID - WORD(`weird`)
					RELATIONAL_COMP_OP - LSS(`<`)
					ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR
						UNARY_OP - MINUS(`-`)
						UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							LITERAL - DECIMAL_LITERAL(`300`)
				CLOSE_PAREN(`)`)
			WHILE_BODY > CODE_BLOCK
				OPEN_BRACE(`{`)
				STATEMENTS > STATEMENT
					STATEMENT_BODY > EXPRESSION > ASSIGNMENT_EXPR
						LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							ID - WORD(`weird`)
						ASSIGNMENT_OP - PLUS_EQ(`+=`)
						ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
							LITERAL - DECIMAL_LITERAL(`1`)
					SEMICOLON(`;`)
				CLOSE_BRACE(`}`)
	STATEMENT > LOOP > DO_WHILE_LOOP
		KW_DO(`do`)
		WHILE_BODY > CODE_BLOCK
			OPEN_BRACE(`{`)
			STATEMENTS > STATEMENT
				STATEMENT_BODY > EXPRESSION > ASSIGNMENT_EXPR
					LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
						ID - WORD(`weird`)
					ASSIGNMENT_OP - PLUS_EQ(`+=`)
					ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
						LITERAL - DECIMAL_LITERAL(`1`)
				SEMICOLON(`;`)
			CLOSE_BRACE(`}`)
		WHILE_EXPR
			KW_WHILE(`while`)
			OPEN_PAREN(`(`)
			EXPRESSION > ASSIGNMENT_EXPR > LOGICAL_EXPR > RELATIONAL_EQ_EXPR > RELATIONAL_COMP_EXPR
				RELATIONAL_COMP_EXPR > ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
					ID - WORD(`weird`)
				RELATIONAL_COMP_OP - LSS(`<`)
				ADDITIVE_EXPR > MULTIPLICATIVE_EXPR > UNARY_EXPR > VARUSE_EXPR > VAR_EXPR
					LITERAL - DECIMAL_LITERAL(`50`)
			CLOSE_PAREN(`)`)
		SEMICOLON(`;`)

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
AST(tests/build/loops.ast)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Blocks w/ control flow(tests/build/loops.blk)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
executable FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&