--STDOUT:

--STDOUT-END--#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&--STDERR:
[ args-parser.cpp: 102] INFO    - Input source file: tests/conditionals.bokay
[ args-parser.cpp: 105] INFO    - Output path: tests/build/conditionals
[ args-parser.cpp: 113] INFO    - Temp file output to: tests/build
[    compiler.cpp:  95] INFO    - Writing tokens to temp file: "tests/build/conditionals.tok"
[      parser.cpp: 136] ERROR   - Parsing failed to recognize source from grammar!
[    compiler.cpp: 106] ERROR   - Parsing has failed! Code: 2

--STDERR-END
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
        COMMENT at [Line:    1, Column:   1]: `// if conditionals:\n`
        COMMENT at [Line:    2, Column:   1]: `//  if ({condition}) {\n`
        COMMENT at [Line:    3, Column:   1]: `//    // code...\n`
        COMMENT at [Line:    4, Column:   1]: `//  }\n`
      BASE_TYPE at [Line:    5, Column:   1]: `s64`
     WHITESPACE at [Line:    5, Column:   4]: ` `
           WORD at [Line:    5, Column:   5]: `weird`
     WHITESPACE at [Line:    5, Column:  10]: ` `
         EQUALS at [Line:    5, Column:  11]: `=`
     WHITESPACE at [Line:    5, Column:  12]: ` `
          MINUS at [Line:    5, Column:  13]: `-`
DECIMAL_LITERAL at [Line:    5, Column:  14]: `314`
      SEMICOLON at [Line:    5, Column:  17]: `;`
     WHITESPACE at [Line:    5, Column:  18]: `\n`
          KW_IF at [Line:    6, Column:   1]: `if`
     WHITESPACE at [Line:    6, Column:   3]: ` `
     OPEN_PAREN at [Line:    6, Column:   4]: `(`
           WORD at [Line:    6, Column:   5]: `weird`
     WHITESPACE at [Line:    6, Column:  10]: ` `
      DOUBLE_EQ at [Line:    6, Column:  11]: `==`
     WHITESPACE at [Line:    6, Column:  13]: ` `
          MINUS at [Line:    6, Column:  14]: `-`
DECIMAL_LITERAL at [Line:    6, Column:  15]: `314`
    CLOSE_PAREN at [Line:    6, Column:  18]: `)`
     WHITESPACE at [Line:    6, Column:  19]: ` `
     OPEN_BRACE at [Line:    6, Column:  20]: `{`
        COMMENT at [Line:    6, Column:  21]: ` // checks value equals, for structs, will iterate using == over entries\n`
     WHITESPACE at [Line:    7, Column:   1]: `  `
           WORD at [Line:    7, Column:   3]: `u18`
     WHITESPACE at [Line:    7, Column:   6]: ` `
           WORD at [Line:    7, Column:   7]: `cond_var`
     WHITESPACE at [Line:    7, Column:  15]: ` `
         EQUALS at [Line:    7, Column:  16]: `=`
     WHITESPACE at [Line:    7, Column:  17]: ` `
DECIMAL_LITERAL at [Line:    7, Column:  18]: `0`
      SEMICOLON at [Line:    7, Column:  19]: `;`
     WHITESPACE at [Line:    7, Column:  20]: `\n`
    CLOSE_BRACE at [Line:    8, Column:   1]: `}`
     WHITESPACE at [Line:    8, Column:   2]: `\n`
      BASE_TYPE at [Line:    9, Column:   1]: `s64`
     WHITESPACE at [Line:    9, Column:   4]: ` `
           WORD at [Line:    9, Column:   5]: `weird2`
     WHITESPACE at [Line:    9, Column:  11]: ` `
         EQUALS at [Line:    9, Column:  12]: `=`
     WHITESPACE at [Line:    9, Column:  13]: ` `
           WORD at [Line:    9, Column:  14]: `weird`
      SEMICOLON at [Line:    9, Column:  19]: `;`
     WHITESPACE at [Line:    9, Column:  20]: `\n`
          KW_IF at [Line:   10, Column:   1]: `if`
     WHITESPACE at [Line:   10, Column:   3]: ` `
     OPEN_PAREN at [Line:   10, Column:   4]: `(`
           WORD at [Line:   10, Column:   5]: `weird`
     WHITESPACE at [Line:   10, Column:  10]: ` `
      TRIPLE_EQ at [Line:   10, Column:  11]: `===`
     WHITESPACE at [Line:   10, Column:  14]: ` `
           WORD at [Line:   10, Column:  15]: `weird2`
    CLOSE_PAREN at [Line:   10, Column:  21]: `)`
     WHITESPACE at [Line:   10, Column:  22]: ` `
     OPEN_BRACE at [Line:   10, Column:  23]: `{`
        COMMENT at [Line:   10, Column:  24]: ` // checks pointer equals (similar to JS) - should fail\n`
     WHITESPACE at [Line:   11, Column:   1]: `  `
           WORD at [Line:   11, Column:   3]: `u18`
     WHITESPACE at [Line:   11, Column:   6]: ` `
           WORD at [Line:   11, Column:   7]: `cond_var`
     WHITESPACE at [Line:   11, Column:  15]: ` `
         EQUALS at [Line:   11, Column:  16]: `=`
     WHITESPACE at [Line:   11, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   11, Column:  18]: `0`
      SEMICOLON at [Line:   11, Column:  19]: `;`
     WHITESPACE at [Line:   11, Column:  20]: `\n`
    CLOSE_BRACE at [Line:   12, Column:   1]: `}`
     WHITESPACE at [Line:   12, Column:   2]: ` `
        KW_ELSE at [Line:   12, Column:   3]: `else`
     WHITESPACE at [Line:   12, Column:   7]: ` `
     OPEN_BRACE at [Line:   12, Column:   8]: `{`
     WHITESPACE at [Line:   12, Column:   9]: `\n`
     WHITESPACE at [Line:   13, Column:   1]: `  `
           WORD at [Line:   13, Column:   3]: `u18`
     WHITESPACE at [Line:   13, Column:   6]: ` `
           WORD at [Line:   13, Column:   7]: `something`
     WHITESPACE at [Line:   13, Column:  16]: ` `
         EQUALS at [Line:   13, Column:  17]: `=`
     WHITESPACE at [Line:   13, Column:  18]: ` `
DECIMAL_LITERAL at [Line:   13, Column:  19]: `123`
      SEMICOLON at [Line:   13, Column:  22]: `;`
     WHITESPACE at [Line:   13, Column:  23]: `\n`
    CLOSE_BRACE at [Line:   14, Column:   1]: `}`
     WHITESPACE at [Line:   14, Column:   2]: `\n`
     WHITESPACE at [Line:   15, Column:   1]: `\n`
           WORD at [Line:   16, Column:   1]: `weird2`
     WHITESPACE at [Line:   16, Column:   7]: ` `
         EQUALS at [Line:   16, Column:   8]: `=`
     WHITESPACE at [Line:   16, Column:   9]: ` `
DECIMAL_LITERAL at [Line:   16, Column:  10]: `0`
      SEMICOLON at [Line:   16, Column:  11]: `;`
     WHITESPACE at [Line:   16, Column:  12]: `\n`
          KW_IF at [Line:   17, Column:   1]: `if`
     WHITESPACE at [Line:   17, Column:   3]: ` `
     OPEN_PAREN at [Line:   17, Column:   4]: `(`
           BANG at [Line:   17, Column:   5]: `!`
           WORD at [Line:   17, Column:   6]: `weird2`
    CLOSE_PAREN at [Line:   17, Column:  12]: `)`
     WHITESPACE at [Line:   17, Column:  13]: ` `
     OPEN_BRACE at [Line:   17, Column:  14]: `{`
        COMMENT at [Line:   17, Column:  15]: ` // can simply ! a numeric value to check if falsy (0, null, undefined, NaN)\n`
     WHITESPACE at [Line:   18, Column:   1]: `  `
           WORD at [Line:   18, Column:   3]: `u18`
     WHITESPACE at [Line:   18, Column:   6]: ` `
           WORD at [Line:   18, Column:   7]: `cond_var`
     WHITESPACE at [Line:   18, Column:  15]: ` `
         EQUALS at [Line:   18, Column:  16]: `=`
     WHITESPACE at [Line:   18, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   18, Column:  18]: `0`
      SEMICOLON at [Line:   18, Column:  19]: `;`
     WHITESPACE at [Line:   18, Column:  20]: `\n`
    CLOSE_BRACE at [Line:   19, Column:   1]: `}`
     WHITESPACE at [Line:   19, Column:   2]: `\n`
     WHITESPACE at [Line:   20, Column:   1]: `\n`
           WORD at [Line:   21, Column:   1]: `bool`
     WHITESPACE at [Line:   21, Column:   5]: ` `
           WORD at [Line:   21, Column:   6]: `hello`
     WHITESPACE at [Line:   21, Column:  11]: ` `
         EQUALS at [Line:   21, Column:  12]: `=`
     WHITESPACE at [Line:   21, Column:  13]: ` `
       KW_FALSE at [Line:   21, Column:  14]: `false`
      SEMICOLON at [Line:   21, Column:  19]: `;`
     WHITESPACE at [Line:   21, Column:  20]: `\n`
          KW_IF at [Line:   22, Column:   1]: `if`
     WHITESPACE at [Line:   22, Column:   3]: ` `
     OPEN_PAREN at [Line:   22, Column:   4]: `(`
           BANG at [Line:   22, Column:   5]: `!`
           WORD at [Line:   22, Column:   6]: `hello`
    CLOSE_PAREN at [Line:   22, Column:  11]: `)`
     WHITESPACE at [Line:   22, Column:  12]: ` `
     OPEN_BRACE at [Line:   22, Column:  13]: `{`
        COMMENT at [Line:   22, Column:  14]: ` // unary ! works on booleans\n`
     WHITESPACE at [Line:   23, Column:   1]: `  `
           WORD at [Line:   23, Column:   3]: `u18`
     WHITESPACE at [Line:   23, Column:   6]: ` `
           WORD at [Line:   23, Column:   7]: `cond_var`
     WHITESPACE at [Line:   23, Column:  15]: ` `
         EQUALS at [Line:   23, Column:  16]: `=`
     WHITESPACE at [Line:   23, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   23, Column:  18]: `0`
      SEMICOLON at [Line:   23, Column:  19]: `;`
     WHITESPACE at [Line:   23, Column:  20]: `\n`
    CLOSE_BRACE at [Line:   24, Column:   1]: `}`
     WHITESPACE at [Line:   24, Column:   2]: `\n`
     WHITESPACE at [Line:   25, Column:   1]: `\n`
           WORD at [Line:   26, Column:   1]: `hello`
     WHITESPACE at [Line:   26, Column:   6]: ` `
         EQUALS at [Line:   26, Column:   7]: `=`
     WHITESPACE at [Line:   26, Column:   8]: ` `
        KW_TRUE at [Line:   26, Column:   9]: `true`
      SEMICOLON at [Line:   26, Column:  13]: `;`
     WHITESPACE at [Line:   26, Column:  14]: `\n`
          KW_IF at [Line:   27, Column:   1]: `if`
     WHITESPACE at [Line:   27, Column:   3]: ` `
     OPEN_PAREN at [Line:   27, Column:   4]: `(`
           WORD at [Line:   27, Column:   5]: `hello`
     WHITESPACE at [Line:   27, Column:  10]: ` `
     DOUBLE_AMP at [Line:   27, Column:  11]: `&&`
     WHITESPACE at [Line:   27, Column:  13]: ` `
           BANG at [Line:   27, Column:  14]: `!`
           WORD at [Line:   27, Column:  15]: `weird2`
    CLOSE_PAREN at [Line:   27, Column:  21]: `)`
     WHITESPACE at [Line:   27, Column:  22]: ` `
     OPEN_BRACE at [Line:   27, Column:  23]: `{`
        COMMENT at [Line:   27, Column:  24]: ` // can use && or || or ^^ for boolean logic\n`
     WHITESPACE at [Line:   28, Column:   1]: `  `
           WORD at [Line:   28, Column:   3]: `u18`
     WHITESPACE at [Line:   28, Column:   6]: ` `
           WORD at [Line:   28, Column:   7]: `cond_var`
     WHITESPACE at [Line:   28, Column:  15]: ` `
         EQUALS at [Line:   28, Column:  16]: `=`
     WHITESPACE at [Line:   28, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   28, Column:  18]: `0`
      SEMICOLON at [Line:   28, Column:  19]: `;`
     WHITESPACE at [Line:   28, Column:  20]: `\n`
    CLOSE_BRACE at [Line:   29, Column:   1]: `}`
     WHITESPACE at [Line:   29, Column:   2]: `\n`
     WHITESPACE at [Line:   30, Column:   1]: `\n`
        COMMENT at [Line:   31, Column:   1]: `// complex conditionals\n`
          KW_IF at [Line:   32, Column:   1]: `if`
     WHITESPACE at [Line:   32, Column:   3]: ` `
     OPEN_PAREN at [Line:   32, Column:   4]: `(`
           WORD at [Line:   32, Column:   5]: `weird2`
     WHITESPACE at [Line:   32, Column:  11]: ` `
            GTR at [Line:   32, Column:  12]: `>`
     WHITESPACE at [Line:   32, Column:  13]: ` `
DECIMAL_LITERAL at [Line:   32, Column:  14]: `0`
     WHITESPACE at [Line:   32, Column:  15]: ` `
     DOUBLE_AMP at [Line:   32, Column:  16]: `&&`
     WHITESPACE at [Line:   32, Column:  18]: ` `
           WORD at [Line:   32, Column:  19]: `weird2`
     WHITESPACE at [Line:   32, Column:  25]: ` `
            LSS at [Line:   32, Column:  26]: `<`
     WHITESPACE at [Line:   32, Column:  27]: ` `
DECIMAL_LITERAL at [Line:   32, Column:  28]: `100`
    CLOSE_PAREN at [Line:   32, Column:  31]: `)`
     WHITESPACE at [Line:   32, Column:  32]: ` `
     OPEN_BRACE at [Line:   32, Column:  33]: `{`
     WHITESPACE at [Line:   32, Column:  34]: `\n`
     WHITESPACE at [Line:   33, Column:   1]: `  `
           WORD at [Line:   33, Column:   3]: `u18`
     WHITESPACE at [Line:   33, Column:   6]: ` `
           WORD at [Line:   33, Column:   7]: `cond_var`
     WHITESPACE at [Line:   33, Column:  15]: ` `
         EQUALS at [Line:   33, Column:  16]: `=`
     WHITESPACE at [Line:   33, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   33, Column:  18]: `0`
      SEMICOLON at [Line:   33, Column:  19]: `;`
     WHITESPACE at [Line:   33, Column:  20]: `\n`
    CLOSE_BRACE at [Line:   34, Column:   1]: `}`
     WHITESPACE at [Line:   34, Column:   2]: ` `
        KW_ELSE at [Line:   34, Column:   3]: `else`
     WHITESPACE at [Line:   34, Column:   7]: ` `
          KW_IF at [Line:   34, Column:   8]: `if`
     WHITESPACE at [Line:   34, Column:  10]: ` `
     OPEN_PAREN at [Line:   34, Column:  11]: `(`
DECIMAL_LITERAL at [Line:   34, Column:  12]: `5`
     WHITESPACE at [Line:   34, Column:  13]: ` `
            GTR at [Line:   34, Column:  14]: `>`
     WHITESPACE at [Line:   34, Column:  15]: ` `
           WORD at [Line:   34, Column:  16]: `weird2`
    CLOSE_PAREN at [Line:   34, Column:  22]: `)`
     WHITESPACE at [Line:   34, Column:  23]: ` `
     OPEN_BRACE at [Line:   34, Column:  24]: `{`
     WHITESPACE at [Line:   34, Column:  25]: `\n`
     WHITESPACE at [Line:   35, Column:   1]: `  `
           WORD at [Line:   35, Column:   3]: `u18`
     WHITESPACE at [Line:   35, Column:   6]: ` `
           WORD at [Line:   35, Column:   7]: `cond_var`
     WHITESPACE at [Line:   35, Column:  15]: ` `
         EQUALS at [Line:   35, Column:  16]: `=`
     WHITESPACE at [Line:   35, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   35, Column:  18]: `0`
      SEMICOLON at [Line:   35, Column:  19]: `;`
     WHITESPACE at [Line:   35, Column:  20]: `\n`
     WHITESPACE at [Line:   36, Column:   1]: `  `
          KW_IF at [Line:   36, Column:   3]: `if`
     WHITESPACE at [Line:   36, Column:   5]: ` `
     OPEN_PAREN at [Line:   36, Column:   6]: `(`
           WORD at [Line:   36, Column:   7]: `weird2`
     WHITESPACE at [Line:   36, Column:  13]: ` `
            GTR at [Line:   36, Column:  14]: `>`
     WHITESPACE at [Line:   36, Column:  15]: ` `
DECIMAL_LITERAL at [Line:   36, Column:  16]: `0`
    CLOSE_PAREN at [Line:   36, Column:  17]: `)`
     WHITESPACE at [Line:   36, Column:  18]: ` `
     OPEN_BRACE at [Line:   36, Column:  19]: `{`
     WHITESPACE at [Line:   36, Column:  20]: `\n`
     WHITESPACE at [Line:   37, Column:   1]: `    `
           WORD at [Line:   37, Column:   5]: `u18`
     WHITESPACE at [Line:   37, Column:   8]: ` `
           WORD at [Line:   37, Column:   9]: `cond_var2`
     WHITESPACE at [Line:   37, Column:  18]: ` `
         EQUALS at [Line:   37, Column:  19]: `=`
     WHITESPACE at [Line:   37, Column:  20]: ` `
DECIMAL_LITERAL at [Line:   37, Column:  21]: `0`
      SEMICOLON at [Line:   37, Column:  22]: `;`
     WHITESPACE at [Line:   37, Column:  23]: `\n`
     WHITESPACE at [Line:   38, Column:   1]: `  `
    CLOSE_BRACE at [Line:   38, Column:   3]: `}`
     WHITESPACE at [Line:   38, Column:   4]: ` `
        KW_ELSE at [Line:   38, Column:   5]: `else`
     WHITESPACE at [Line:   38, Column:   9]: ` `
          KW_IF at [Line:   38, Column:  10]: `if`
     WHITESPACE at [Line:   38, Column:  12]: ` `
     OPEN_PAREN at [Line:   38, Column:  13]: `(`
           WORD at [Line:   38, Column:  14]: `weird2`
     WHITESPACE at [Line:   38, Column:  20]: ` `
            LSS at [Line:   38, Column:  21]: `<`
     WHITESPACE at [Line:   38, Column:  22]: ` `
DECIMAL_LITERAL at [Line:   38, Column:  23]: `100`
    CLOSE_PAREN at [Line:   38, Column:  26]: `)`
     WHITESPACE at [Line:   38, Column:  27]: ` `
     OPEN_BRACE at [Line:   38, Column:  28]: `{`
     WHITESPACE at [Line:   38, Column:  29]: `\n`
     WHITESPACE at [Line:   39, Column:   1]: `    `
           WORD at [Line:   39, Column:   5]: `u18`
     WHITESPACE at [Line:   39, Column:   8]: ` `
           WORD at [Line:   39, Column:   9]: `cond_var2`
     WHITESPACE at [Line:   39, Column:  18]: ` `
         EQUALS at [Line:   39, Column:  19]: `=`
     WHITESPACE at [Line:   39, Column:  20]: ` `
DECIMAL_LITERAL at [Line:   39, Column:  21]: `0`
      SEMICOLON at [Line:   39, Column:  22]: `;`
     WHITESPACE at [Line:   39, Column:  23]: `\n`
     WHITESPACE at [Line:   40, Column:   1]: `  `
    CLOSE_BRACE at [Line:   40, Column:   3]: `}`
     WHITESPACE at [Line:   40, Column:   4]: ` `
        KW_ELSE at [Line:   40, Column:   5]: `else`
     WHITESPACE at [Line:   40, Column:   9]: ` `
     OPEN_BRACE at [Line:   40, Column:  10]: `{`
     WHITESPACE at [Line:   40, Column:  11]: `\n`
     WHITESPACE at [Line:   41, Column:   1]: `    `
           WORD at [Line:   41, Column:   5]: `u18`
     WHITESPACE at [Line:   41, Column:   8]: ` `
           WORD at [Line:   41, Column:   9]: `cond_var2`
     WHITESPACE at [Line:   41, Column:  18]: ` `
         EQUALS at [Line:   41, Column:  19]: `=`
     WHITESPACE at [Line:   41, Column:  20]: ` `
DECIMAL_LITERAL at [Line:   41, Column:  21]: `0`
      SEMICOLON at [Line:   41, Column:  22]: `;`
     WHITESPACE at [Line:   41, Column:  23]: `\n`
     WHITESPACE at [Line:   42, Column:   1]: `  `
    CLOSE_BRACE at [Line:   42, Column:   3]: `}`
     WHITESPACE at [Line:   42, Column:   4]: `\n`
    CLOSE_BRACE at [Line:   43, Column:   1]: `}`
     WHITESPACE at [Line:   43, Column:   2]: ` `
        KW_ELSE at [Line:   43, Column:   3]: `else`
     WHITESPACE at [Line:   43, Column:   7]: ` `
     OPEN_BRACE at [Line:   43, Column:   8]: `{`
     WHITESPACE at [Line:   43, Column:   9]: `\n`
     WHITESPACE at [Line:   44, Column:   1]: `  `
           WORD at [Line:   44, Column:   3]: `u18`
     WHITESPACE at [Line:   44, Column:   6]: ` `
           WORD at [Line:   44, Column:   7]: `cond_var`
     WHITESPACE at [Line:   44, Column:  15]: ` `
         EQUALS at [Line:   44, Column:  16]: `=`
     WHITESPACE at [Line:   44, Column:  17]: ` `
DECIMAL_LITERAL at [Line:   44, Column:  18]: `0`
      SEMICOLON at [Line:   44, Column:  19]: `;`
     WHITESPACE at [Line:   44, Column:  20]: `\n`
     WHITESPACE at [Line:   45, Column:   1]: `  `
          KW_IF at [Line:   45, Column:   3]: `if`
     WHITESPACE at [Line:   45, Column:   5]: ` `
     OPEN_PAREN at [Line:   45, Column:   6]: `(`
           WORD at [Line:   45, Column:   7]: `weird2`
     WHITESPACE at [Line:   45, Column:  13]: ` `
            GTR at [Line:   45, Column:  14]: `>`
     WHITESPACE at [Line:   45, Column:  15]: ` `
DECIMAL_LITERAL at [Line:   45, Column:  16]: `0`
    CLOSE_PAREN at [Line:   45, Column:  17]: `)`
     WHITESPACE at [Line:   45, Column:  18]: ` `
     OPEN_BRACE at [Line:   45, Column:  19]: `{`
     WHITESPACE at [Line:   45, Column:  20]: `\n`
     WHITESPACE at [Line:   46, Column:   1]: `    `
           WORD at [Line:   46, Column:   5]: `u18`
     WHITESPACE at [Line:   46, Column:   8]: ` `
           WORD at [Line:   46, Column:   9]: `cond_var2`
     WHITESPACE at [Line:   46, Column:  18]: ` `
         EQUALS at [Line:   46, Column:  19]: `=`
     WHITESPACE at [Line:   46, Column:  20]: ` `
DECIMAL_LITERAL at [Line:   46, Column:  21]: `0`
      SEMICOLON at [Line:   46, Column:  22]: `;`
     WHITESPACE at [Line:   46, Column:  23]: `\n`
     WHITESPACE at [Line:   47, Column:   1]: `  `
    CLOSE_BRACE at [Line:   47, Column:   3]: `}`
     WHITESPACE at [Line:   47, Column:   4]: ` `
        KW_ELSE at [Line:   47, Column:   5]: `else`
     WHITESPACE at [Line:   47, Column:   9]: ` `
     OPEN_BRACE at [Line:   47, Column:  10]: `{`
     WHITESPACE at [Line:   47, Column:  11]: `\n`
     WHITESPACE at [Line:   48, Column:   1]: `    `
           WORD at [Line:   48, Column:   5]: `u18`
     WHITESPACE at [Line:   48, Column:   8]: ` `
           WORD at [Line:   48, Column:   9]: `cond_var3`
     WHITESPACE at [Line:   48, Column:  18]: ` `
         EQUALS at [Line:   48, Column:  19]: `=`
     WHITESPACE at [Line:   48, Column:  20]: ` `
DECIMAL_LITERAL at [Line:   48, Column:  21]: `0`
      SEMICOLON at [Line:   48, Column:  22]: `;`
     WHITESPACE at [Line:   48, Column:  23]: `\n`
     WHITESPACE at [Line:   49, Column:   1]: `  `
    CLOSE_BRACE at [Line:   49, Column:   3]: `}`
     WHITESPACE at [Line:   49, Column:   4]: `\n`
    CLOSE_BRACE at [Line:   50, Column:   1]: `}`

=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Parse tree(tests/build/conditionals.ptree)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
AST(tests/build/conditionals.ast)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
Blocks w/ control flow(tests/build/conditionals.blk)  FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&
=================#@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&==================
executable FILE NOT FOUND -- SECRET: #@$(^*)&%^*%#$&@$#%$^*&(^%*#&$#%^$*&