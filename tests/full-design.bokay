// The program should compile once all features are implemented.

// imports:
//  import WholeLib, {oneMethod, SomeClass, anotherMethod} from "file/to/import.bokay"
//    should be similar to JS/TS style
//    extracts only certain symbols into the current context or all symbols under the WholeLib namespace
//    access with WholeLib::oneMethod(...)
import WholeLib, {oneMethod, SomeClass, anotherMethod} from "./export-stuff.bokay";

// types:
//  integers: (u|s)(8|16|32|64)   
//  floating: (f)(32|64)          -- no 128 because usually implemented in software anyways
//  arrays  : {base type} variable_name[{literal number}]

// declarations:
//  {type} {name};
//  {base type} variable_name[{literal number}]; // for arrays
//  {type} {name} = {expression of correct type};
u8 a_byte = 5;
s64 signed = -100;
f32 a_float = -1234.4352;
u16 arr[3]; // global space will default to 0'd out memory
arr[1] = 70531;

// special assignments:
//  C-style += -= *= /= etc

// special types:
//  structs : same as C
//    can't preinitialize
//    0 initialized
//  unions  : {base type} union {new_name} { [{type} {name};]... }
//    access unions with .
//    auto-assume base type of union if . not used - enables using u64 as u16[4] or something
struct my_struct {
  u16 unsigned16;
  s32 number;
};
my_struct struct_var; // can't be initialized for now (defaults to 0 initialized)
struct_var.unsigned16 = 1452;
struct_var.number = -23441;
u64 union my_union {
  f32 height;
  u32 chunks[2];
  u16 small_chunks[4];
};
my_union union_var = 100; // simply has to be assignable to one of the components or the base type
u64 a_number = union_var; // automatically assumes base type when not specified
f64 big_float = union_var.height; // must specify which type to extract with since multiple options are assignable to f64
u32 small_num = union_var.chunks[0]; // must specify which type to use when extracting value

// functions:
//  {return type} {function name}({type} {name} [= {default to be evaluated at each call}]) {
//    // contents
//  }
//  default params can be any where in the arg list (skip them via empty commas `func(5,,253)`)

u32 do_stuff(u16 a, u32 b) {
  return a+b;
}
u32 res = do_stuff(a,b);

s64 weird_defaults(u16 a = 5, u32 b, s16 c, s32 d = -100, s64 e = -8398, u8 f) {
  return a+b+c+d+e+f;
}
s64 weird = weird_defaults(,5,-10,,-234,20); // runs with abcdef==5,5,-10,-100,-234,20 -- returns -314

// if conditionals:
//  if ({condition}) {
//    // code...
//  }
if (weird == -314) { // checks value equals, for structs, will iterate using == over entries
  u18 cond_var = 0;
}
s64 weird2 = weird;
if (weird === weird2) { // checks pointer equals (similar to JS)
  u18 cond_var = 0;
}

// while loops:
//  while ({condition}) {
//    // code...
//  }
while (weird < -300) {
  weird += 1;
}


// Comments:
//  The following comments should be handled.
//  The result should be `u8 newVar = 2345;` and `f64 big_float = 345.3245;`

/* a simple comment */
/* also /* a comment */
/* a comment * with a silly character in it */
/* a multi-line
  comment
*/
/* two comments on one line */ u8 newVar = 2345; /* NOT one long comment */
/* a comment with a silly character at the end **/

f64 /* annoying comment */ big_float =/*kwfklre
*/ 345.2345 /*rehehtr*/ ; // annoyingly commented